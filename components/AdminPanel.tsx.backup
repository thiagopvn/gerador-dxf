'use client';

import { useState, useEffect } from 'react';
import { Users, Building2, Car, Type, LogOut, Menu, X, Shield, CheckCircle, XCircle } from 'lucide-react';
import { useRouter } from 'next/navigation';
import { Card, CardContent } from '@/components/ui/Card';
import { Button } from '@/components/ui/Button';
import { brands } from '@/data/brands';
import { models } from '@/data/models';
import { fontMappings } from '@/data/fontMappings';

interface User {
  uid: string;
  email: string;
  role: string;
  createdAt: string;
}

interface AuthUser {
  uid: string;
  email: string | null;
  role: string;
}

interface AdminPanelProps {
  user?: AuthUser;
}

export default function AdminPanel({ user }: AdminPanelProps) {
  const [activeTab, setActiveTab] = useState<'users' | 'brands' | 'models' | 'fonts'>('users');
  const [users, setUsers] = useState<User[]>([]);
  const [loading, setLoading] = useState(true);
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const router = useRouter();

  useEffect(() => {
    const mockUsers: User[] = [
      {
        uid: 'admin-123',
        email: 'admin@remarcacao.com',
        role: 'admin',
        createdAt: new Date().toISOString(),
      },
      {
        uid: 'user-456',
        email: 'user@example.com',
        role: 'user',
        createdAt: new Date(Date.now() - 86400000).toISOString(),
      },
      {
        uid: 'user-789',
        email: 'maria.silva@example.com',
        role: 'user',
        createdAt: new Date(Date.now() - 172800000).toISOString(),
      },
    ];
    
    setUsers(mockUsers);
    setLoading(false);
  }, []);

  const handleLogout = () => {
    router.push('/');
  };

  const tabs = [
    { id: 'users', label: 'Usuários', icon: Users },
    { id: 'brands', label: 'Marcas', icon: Building2 },
    { id: 'models', label: 'Modelos', icon: Car },
    { id: 'fonts', label: 'Fontes', icon: Type },
  ];

  const renderUsers = () => (
    <div className="space-y-8 animate-fade-in">
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <div>
          <h2 className="text-3xl font-bold text-foreground mb-2">Gerenciar Usuários</h2>
          <p className="text-muted">Visualize e gerencie todos os usuários do sistema</p>
        </div>
        <div className="flex items-center gap-4">
          <div className="flex items-center gap-2 text-sm text-muted">
            <span>{users.length} usuários</span>
            <span>•</span>
            <span>{users.filter(u => u.role === 'admin').length} admins</span>
          </div>
          <Button variant="primary" className="gradient-red text-white shadow-lg hover:shadow-xl transition-all duration-300">
            <Users className="w-4 h-4 mr-2" />
            Novo Usuário
          </Button>
        </div>
      </div>
      
      <Card className="overflow-hidden shadow-lg border-border/50">
        <CardContent className="p-0">
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead className="bg-gradient-to-r from-card-hover to-card border-b border-border/50">
                <tr>
                  <th className="text-left py-5 px-6 text-sm font-bold text-foreground tracking-wide">USUÁRIO</th>
                  <th className="text-left py-5 px-6 text-sm font-bold text-foreground tracking-wide">FUNÇÃO</th>
                  <th className="text-left py-5 px-6 text-sm font-bold text-foreground tracking-wide">CRIADO EM</th>
                  <th className="text-left py-5 px-6 text-sm font-bold text-foreground tracking-wide">STATUS</th>
                  <th className="text-right py-5 px-6 text-sm font-bold text-foreground tracking-wide">AÇÕES</th>
                </tr>
              </thead>
              <tbody className="divide-y divide-border/30">
                {users.map((user, index) => (
                  <tr key={user.uid} className="hover:bg-card-hover/30 transition-all duration-300 group animate-fade-in" style={{ animationDelay: `${index * 0.1}s` }}>
                    <td className="py-5 px-6">
                      <div className="flex items-center gap-4">
                        <div className="w-12 h-12 bg-gradient-red rounded-xl flex items-center justify-center shadow-md group-hover:shadow-lg transition-all duration-300 glow-red">
                          <Users className="w-6 h-6 text-white" />
                        </div>
                        <div>
                          <span className="text-foreground font-semibold text-base group-hover:text-primary transition-colors">
                            {user.email}
                          </span>
                          <p className="text-muted text-sm">ID: {user.uid.slice(0, 8)}...</p>
                        </div>
                      </div>
                    </td>
                    <td className="py-5 px-6">
                      <span className={`inline-flex items-center gap-2 px-4 py-2 rounded-lg text-sm font-bold shadow-sm ${
                        user.role === 'admin' 
                          ? 'bg-gradient-red text-white glow-red' 
                          : 'bg-success/20 text-success border border-success/30'
                      }`}>
                        <Shield className="w-4 h-4" />
                        {user.role === 'admin' ? 'Administrador' : 'Usuário'}
                      </span>
                    </td>
                    <td className="py-5 px-6">
                      <div className="text-foreground font-medium">
                        {new Date(user.createdAt).toLocaleDateString('pt-BR')}
                      </div>
                      <div className="text-muted text-sm">
                        {new Date(user.createdAt).toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' })}
                      </div>
                    </td>
                    <td className="py-5 px-6">
                      <div className="flex items-center gap-2 px-3 py-2 bg-success/10 text-success rounded-lg border border-success/20 w-fit">
                        <div className="w-2 h-2 bg-success rounded-full animate-pulse"></div>
                        <span className="text-sm font-medium">Ativo</span>
                      </div>
                    </td>
                    <td className="py-5 px-6 text-right">
                      <div className="flex items-center justify-end gap-2">
                        <Button variant="secondary" className="hover:bg-primary hover:text-white transition-all duration-300">
                          Editar
                        </Button>
                        <Button variant="secondary" className="hover:bg-error hover:text-white transition-all duration-300">
                          Remover
                        </Button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </CardContent>
      </Card>
    </div>
  );

  const renderBrands = () => (
    <div className="space-y-8 animate-fade-in">
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <div>
          <h2 className="text-3xl font-bold text-foreground mb-2">Gerenciar Marcas</h2>
          <p className="text-muted">Configure as marcas de veículos disponíveis no sistema</p>
        </div>
        <div className="flex items-center gap-2 text-sm text-muted">
          <span>{brands.length} marcas</span>
          <span>•</span>
          <span>{brands.filter(b => b.active).length} ativas</span>
        </div>
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
        {brands.map((brand, index) => (
          <div key={brand.id} className="group animate-slide-up hover:shadow-xl hover:shadow-primary/5 transition-all duration-300" style={{ animationDelay: `${index * 0.1}s` }}>
            <Card interactive className="h-full">
            <CardContent className="p-6">
              <div className="flex items-start justify-between mb-6">
                <div className="flex items-center gap-4">
                  <div className="relative w-16 h-16 bg-white rounded-xl p-2 shadow-sm group-hover:shadow-md transition-all duration-300">
                    <img 
                      src={`/logos/${brand.id}.png`}
                      alt={`Logo ${brand.name}`}
                      className="w-full h-full object-contain"
                      onError={(e) => {
                        e.currentTarget.style.display = 'none';
                        e.currentTarget.parentElement?.querySelector('.fallback-icon')?.classList.remove('hidden');
                      }}
                    />
                    <div className="fallback-icon hidden w-full h-full flex items-center justify-center">
                      <Building2 className="w-8 h-8 text-muted" />
                    </div>
                  </div>
                  <div className="flex-1">
                    <h3 className="font-bold text-lg text-foreground group-hover:text-primary transition-colors mb-1">
                      {brand.name}
                    </h3>
                    <p className="text-xs text-muted font-medium uppercase tracking-wider">
                      ID: {brand.id}
                    </p>
                  </div>
                </div>
                <div className="flex flex-col items-end gap-2">
                  {brand.active ? (
                    <div className="flex items-center gap-1 px-2 py-1 bg-success/10 text-success rounded-md">
                      <CheckCircle className="w-3 h-3" />
                      <span className="text-xs font-medium">Ativa</span>
                    </div>
                  ) : (
                    <div className="flex items-center gap-1 px-2 py-1 bg-error/10 text-error rounded-md">
                      <XCircle className="w-3 h-3" />
                      <span className="text-xs font-medium">Inativa</span>
                    </div>
                  )}
                </div>
              </div>
              
              <div className="space-y-3">
                <div className="flex items-center justify-between text-sm">
                  <span className="text-muted">Posição:</span>
                  <span className="font-medium text-foreground bg-card-hover px-2 py-1 rounded text-xs">#{brand.order}</span>
                </div>
                
                <Button 
                  variant="secondary" 
                  className="w-full group-hover:bg-primary group-hover:text-white group-hover:border-primary transition-all duration-300"
                >
                  <Building2 className="w-4 h-4 mr-2" />
                  Configurar Marca
                </Button>
              </div>
            </CardContent>
            </Card>
          </div>
        ))}
      </div>
    </div>
  );

  const renderModels = () => (
    <div className="space-y-8 animate-fade-in">
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <div>
          <h2 className="text-3xl font-bold text-foreground mb-2">Gerenciar Modelos</h2>
          <p className="text-muted">Configure os modelos de veículos disponíveis no sistema</p>
        </div>
        <div className="flex items-center gap-4">
          <div className="flex items-center gap-2 text-sm text-muted">
            <span>{models.length} modelos</span>
            <span>•</span>
            <span>{models.filter(m => m.active).length} ativos</span>
          </div>
          <Button variant="primary" className="gradient-red text-white shadow-lg hover:shadow-xl transition-all duration-300">
            <Car className="w-4 h-4 mr-2" />
            Novo Modelo
          </Button>
        </div>
      </div>
      
      <Card className="overflow-hidden shadow-lg border-border/50">
        <CardContent className="p-0">
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead className="bg-gradient-to-r from-card-hover to-card border-b border-border/50">
                <tr>
                  <th className="text-left py-5 px-6 text-sm font-bold text-foreground tracking-wide">MODELO</th>
                  <th className="text-left py-5 px-6 text-sm font-bold text-foreground tracking-wide">MARCA</th>
                  <th className="text-left py-5 px-6 text-sm font-bold text-foreground tracking-wide">STATUS</th>
                  <th className="text-right py-5 px-6 text-sm font-bold text-foreground tracking-wide">AÇÕES</th>
                </tr>
              </thead>
              <tbody className="divide-y divide-border/30">
                {models.slice(0, 12).map((model, index) => (
                  <tr key={model.id} className="hover:bg-card-hover/30 transition-all duration-300 group animate-fade-in" style={{ animationDelay: `${index * 0.05}s` }}>
                    <td className="py-5 px-6">
                      <div className="flex items-center gap-4">
                        <div className="w-12 h-12 bg-gradient-red rounded-xl flex items-center justify-center shadow-md group-hover:shadow-lg transition-all duration-300 glow-red">
                          <Car className="w-6 h-6 text-white" />
                        </div>
                        <div>
                          <span className="text-foreground font-semibold text-base group-hover:text-primary transition-colors">
                            {model.name}
                          </span>
                          <p className="text-muted text-sm">ID: {model.id}</p>
                        </div>
                      </div>
                    </td>
                    <td className="py-5 px-6">
                      <div className="flex items-center gap-2">
                        <div className="w-8 h-8 bg-white rounded-lg p-1 shadow-sm">
                          <img 
                            src={`/logos/${model.brandId}.png`}
                            alt={model.brandName}
                            className="w-full h-full object-contain"
                            onError={(e) => {
                              e.currentTarget.style.display = 'none';
                              e.currentTarget.parentElement?.querySelector('.fallback-icon')?.classList.remove('hidden');
                            }}
                          />
                          <div className="fallback-icon hidden w-full h-full flex items-center justify-center">
                            <Building2 className="w-4 h-4 text-muted" />
                          </div>
                        </div>
                        <span className="text-foreground font-medium">{model.brandName}</span>
                      </div>
                    </td>
                    <td className="py-5 px-6">
                      <span className={`inline-flex items-center gap-2 px-4 py-2 rounded-lg text-sm font-bold shadow-sm ${
                        model.active 
                          ? 'bg-success/20 text-success border border-success/30' 
                          : 'bg-error/20 text-error border border-error/30'
                      }`}>
                        {model.active ? (
                          <>
                            <CheckCircle className="w-4 h-4" />
                            Ativo
                          </>
                        ) : (
                          <>
                            <XCircle className="w-4 h-4" />
                            Inativo
                          </>
                        )}
                      </span>
                    </td>
                    <td className="py-5 px-6 text-right">
                      <div className="flex items-center justify-end gap-2">
                        <Button variant="secondary" className="hover:bg-primary hover:text-white transition-all duration-300">
                          Editar
                        </Button>
                        <Button variant="secondary" className="hover:bg-warning hover:text-white transition-all duration-300">
                          {model.active ? 'Desativar' : 'Ativar'}
                        </Button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </CardContent>
      </Card>
    </div>
  );

  const renderFonts = () => (
    <div className="space-y-8 animate-fade-in">
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <div>
          <h2 className="text-3xl font-bold text-foreground mb-2">Mapeamentos de Fonte</h2>
          <p className="text-muted">Configure as fontes utilizadas para cada modelo e período</p>
        </div>
        <div className="flex items-center gap-4">
          <div className="flex items-center gap-2 text-sm text-muted">
            <span>{fontMappings.length} mapeamentos</span>
          </div>
          <Button variant="primary" className="gradient-red text-white shadow-lg hover:shadow-xl transition-all duration-300">
            <Type className="w-4 h-4 mr-2" />
            Nova Fonte
          </Button>
        </div>
      </div>
      
      <div className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6">
        {fontMappings.slice(0, 9).map((mapping, index) => {
          const model = models.find(m => m.id === mapping.modelId);
          return (
            <div key={mapping.id} className="group animate-slide-up hover:shadow-xl hover:shadow-primary/5 transition-all duration-300" style={{ animationDelay: `${index * 0.1}s` }}>
              <Card className="h-full">
              <CardContent className="p-6">
                <div className="flex items-start justify-between mb-6">
                  <div className="flex items-center gap-3">
                    <div className="w-12 h-12 bg-white rounded-xl p-2 shadow-sm group-hover:shadow-md transition-all duration-300">
                      <img 
                        src={`/logos/${model?.brandId}.png`}
                        alt={model?.brandName}
                        className="w-full h-full object-contain"
                        onError={(e) => {
                          e.currentTarget.style.display = 'none';
                          e.currentTarget.parentElement?.querySelector('.fallback-icon')?.classList.remove('hidden');
                        }}
                      />
                      <div className="fallback-icon hidden w-full h-full flex items-center justify-center">
                        <Type className="w-6 h-6 text-muted" />
                      </div>
                    </div>
                    <div>
                      <h3 className="font-bold text-foreground group-hover:text-primary transition-colors">
                        {mapping.modelName}
                      </h3>
                      <p className="text-sm text-muted mt-1">
                        {mapping.yearStart} - {mapping.yearEnd}
                      </p>
                    </div>
                  </div>
                  <div className="w-10 h-10 bg-gradient-red rounded-lg flex items-center justify-center shadow-sm glow-red">
                    <Type className="w-5 h-5 text-white" />
                  </div>
                </div>
                
                <div className="space-y-4 pt-4 border-t border-border/50">
                  <div className="space-y-3">
                    <div className="flex justify-between items-start">
                      <span className="text-muted text-sm font-medium">Arquivo:</span>
                      <code className="text-foreground bg-card-hover px-3 py-1 rounded-lg text-xs font-mono max-w-[140px] truncate">
                        {mapping.fontFileName}
                      </code>
                    </div>
                    <div className="flex justify-between items-center">
                      <span className="text-muted text-sm font-medium">Tamanho:</span>
                      <span className="text-foreground font-bold bg-primary/10 text-primary px-2 py-1 rounded-md text-sm">
                        {mapping.settings.fontSize}px
                      </span>
                    </div>
                    <div className="flex justify-between items-center">
                      <span className="text-muted text-sm font-medium">Espaçamento:</span>
                      <span className="text-foreground font-medium">{mapping.settings.spacing || 0}</span>
                    </div>
                  </div>
                  
                  <Button 
                    variant="secondary" 
                    className="w-full group-hover:bg-primary group-hover:text-white group-hover:border-primary transition-all duration-300"
                  >
                    <Type className="w-4 h-4 mr-2" />
                    Configurar Fonte
                  </Button>
                </div>
              </CardContent>
              </Card>
            </div>
          );
        })}
      </div>
    </div>
  );

  if (loading) {
    return (
      <div className="min-h-screen bg-background flex items-center justify-center">
        <div className="flex flex-col items-center gap-6 animate-fade-in">
          <div className="w-20 h-20 bg-gradient-red rounded-2xl flex items-center justify-center animate-pulse glow-red">
            <Shield className="w-10 h-10 text-white" />
          </div>
          <div className="text-center">
            <h2 className="text-xl font-semibold text-foreground mb-2">Carregando Painel</h2>
            <p className="text-muted">Preparando o ambiente administrativo...</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-background">
      {/* Mobile Header */}
      <header className="lg:hidden bg-card/90 backdrop-blur-sm border-b border-border sticky top-0 z-40">
        <div className="flex items-center justify-between px-4 py-4">
          <div className="flex items-center gap-3">
            <button
              onClick={() => setSidebarOpen(!sidebarOpen)}
              className="p-2 hover:bg-card-hover rounded-lg transition-colors"
            >
              {sidebarOpen ? <X className="w-5 h-5" /> : <Menu className="w-5 h-5" />}
            </button>
            <div className="flex items-center gap-2">
              <div className="w-8 h-8 bg-gradient-red rounded-lg flex items-center justify-center">
                <Shield className="w-4 h-4 text-white" />
              </div>
              <h1 className="text-lg font-bold text-foreground">Painel Admin</h1>
            </div>
          </div>
          <Button variant="secondary" onClick={handleLogout}>
            <LogOut className="w-4 h-4" />
          </Button>
        </div>
      </header>

      <div className="flex">
        {/* Sidebar */}
        <aside className={`
          fixed lg:static inset-y-0 left-0 z-50 lg:z-0
          w-72 bg-card border-r border-border
          transform transition-transform duration-300 lg:transform-none
          ${sidebarOpen ? 'translate-x-0' : '-translate-x-full lg:translate-x-0'}
        `}>
          <div className="p-6 space-y-6 h-full flex flex-col">
            {/* Desktop Header */}
            <div className="hidden lg:block">
              <div className="flex items-center gap-3 mb-4">
                <div className="w-12 h-12 bg-gradient-red rounded-xl flex items-center justify-center glow-red">
                  <Shield className="w-6 h-6 text-white" />
                </div>
                <div>
                  <h1 className="text-xl font-bold text-foreground">Admin Panel</h1>
                  <p className="text-sm text-muted">Sistema de Gestão</p>
                </div>
              </div>
              {user && (
                <div className="p-3 bg-card-hover rounded-lg">
                  <p className="text-sm font-medium text-foreground">{user.email}</p>
                  <p className="text-xs text-muted">Administrador do Sistema</p>
                </div>
              )}
            </div>

            {/* Navigation */}
            <nav className="space-y-2 flex-1">
              <p className="text-xs font-semibold text-muted uppercase tracking-wider px-2 mb-4">
                Navegação
              </p>
              {tabs.map((tab) => {
                const Icon = tab.icon;
                return (
                  <button
                    key={tab.id}
                    onClick={() => {
                      setActiveTab(tab.id as 'users' | 'brands' | 'models' | 'fonts');
                      setSidebarOpen(false);
                    }}
                    className={`
                      w-full flex items-center gap-3 px-4 py-3 rounded-lg
                      text-left transition-all duration-200 group
                      ${activeTab === tab.id
                        ? 'bg-gradient-red text-white shadow-lg glow-red'
                        : 'text-muted hover:text-foreground hover:bg-card-hover'
                      }
                    `}
                  >
                    <Icon className="w-5 h-5 flex-shrink-0" />
                    <span className="font-medium">{tab.label}</span>
                  </button>
                );
              })}
            </nav>

            {/* Desktop Logout */}
            <div className="hidden lg:block pt-6 border-t border-border">
              <Button 
                variant="secondary" 
                className="w-full"
                onClick={handleLogout}
              >
                <LogOut className="w-4 h-4 mr-2" />
                Sair do Sistema
              </Button>
            </div>
          </div>
        </aside>

        {/* Mobile Overlay */}
        {sidebarOpen && (
          <div 
            className="fixed inset-0 bg-background/80 backdrop-blur-sm z-40 lg:hidden"
            onClick={() => setSidebarOpen(false)}
          />
        )}

        {/* Main Content */}
        <main className="flex-1 p-6 lg:p-8">
          <div className="max-w-7xl mx-auto">
            {activeTab === 'users' && renderUsers()}
            {activeTab === 'brands' && renderBrands()}
            {activeTab === 'models' && renderModels()}
            {activeTab === 'fonts' && renderFonts()}
          </div>
        </main>
      </div>
    </div>
  );
}